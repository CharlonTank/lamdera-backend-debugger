module Evergreen.Migrate.V12 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Array
import AssocList
import DebugParser.ElmValue
import Evergreen.V12.DebugParser.ElmValue
import Evergreen.V12.Types
import Evergreen.V5.Types
import Lamdera.Migrations exposing (..)
import Maybe


frontendModel : Evergreen.V5.Types.FrontendModel -> ModelMigration Evergreen.V12.Types.FrontendModel Evergreen.V12.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V5.Types.BackendModel -> ModelMigration Evergreen.V12.Types.BackendModel Evergreen.V12.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V5.Types.FrontendMsg -> MsgMigration Evergreen.V12.Types.FrontendMsg Evergreen.V12.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V5.Types.ToBackend -> MsgMigration Evergreen.V12.Types.ToBackend Evergreen.V12.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V5.Types.BackendMsg -> MsgMigration Evergreen.V12.Types.BackendMsg Evergreen.V12.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V5.Types.ToFrontend -> MsgMigration Evergreen.V12.Types.ToFrontend Evergreen.V12.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V5.Types.BackendModel -> Evergreen.V12.Types.BackendModel
migrate_Types_BackendModel old =
    { sessions = old.sessions |> migrate_AssocList_Dict migrate_Types_SessionName migrate_Types_DebugSession
    }


migrate_AssocList_Dict : (a_old -> a_new) -> (b_old -> b_new) -> AssocList.Dict a_old b_old -> AssocList.Dict a_new b_new
migrate_AssocList_Dict migrate_a migrate_b old =
    old
        |> AssocList.toList
        |> List.map (Tuple.mapBoth migrate_a migrate_b)
        |> AssocList.fromList


migrate_DebugParser_ElmValue_ElmValue : DebugParser.ElmValue.ElmValue -> Evergreen.V12.DebugParser.ElmValue.ElmValue
migrate_DebugParser_ElmValue_ElmValue old =
    case old of
        DebugParser.ElmValue.Plain p0 ->
            Evergreen.V12.DebugParser.ElmValue.Plain (p0 |> migrate_DebugParser_ElmValue_PlainValue)

        DebugParser.ElmValue.Expandable p0 ->
            Evergreen.V12.DebugParser.ElmValue.Expandable (p0 |> migrate_DebugParser_ElmValue_ExpandableValue)


migrate_DebugParser_ElmValue_ExpandableValue : DebugParser.ElmValue.ExpandableValue -> Evergreen.V12.DebugParser.ElmValue.ExpandableValue
migrate_DebugParser_ElmValue_ExpandableValue old =
    case old of
        DebugParser.ElmValue.ElmSequence p0 p1 ->
            Evergreen.V12.DebugParser.ElmValue.ElmSequence (p0 |> migrate_DebugParser_ElmValue_SequenceType)
                (p1 |> List.map migrate_DebugParser_ElmValue_ElmValue)

        DebugParser.ElmValue.ElmType p0 p1 ->
            Evergreen.V12.DebugParser.ElmValue.ElmType p0
                (p1 |> List.map migrate_DebugParser_ElmValue_ElmValue)

        DebugParser.ElmValue.ElmRecord p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmRecord (p0 |> List.map (Tuple.mapSecond migrate_DebugParser_ElmValue_ElmValue))

        DebugParser.ElmValue.ElmDict p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmDict (p0 |> List.map (Tuple.mapBoth migrate_DebugParser_ElmValue_ElmValue migrate_DebugParser_ElmValue_ElmValue))


migrate_DebugParser_ElmValue_PlainValue : DebugParser.ElmValue.PlainValue -> Evergreen.V12.DebugParser.ElmValue.PlainValue
migrate_DebugParser_ElmValue_PlainValue old =
    case old of
        DebugParser.ElmValue.ElmString p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmString p0

        DebugParser.ElmValue.ElmChar p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmChar p0

        DebugParser.ElmValue.ElmNumber p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmNumber p0

        DebugParser.ElmValue.ElmBool p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmBool p0

        DebugParser.ElmValue.ElmFunction ->
            Evergreen.V12.DebugParser.ElmValue.ElmFunction

        DebugParser.ElmValue.ElmInternals ->
            Evergreen.V12.DebugParser.ElmValue.ElmInternals

        DebugParser.ElmValue.ElmUnit ->
            Evergreen.V12.DebugParser.ElmValue.ElmUnit

        DebugParser.ElmValue.ElmFile p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmFile p0

        DebugParser.ElmValue.ElmBytes p0 ->
            Evergreen.V12.DebugParser.ElmValue.ElmBytes p0


migrate_DebugParser_ElmValue_SequenceType : DebugParser.ElmValue.SequenceType -> Evergreen.V12.DebugParser.ElmValue.SequenceType
migrate_DebugParser_ElmValue_SequenceType old =
    case old of
        DebugParser.ElmValue.SeqSet ->
            Evergreen.V12.DebugParser.ElmValue.SeqSet

        DebugParser.ElmValue.SeqList ->
            Evergreen.V12.DebugParser.ElmValue.SeqList

        DebugParser.ElmValue.SeqArray ->
            Evergreen.V12.DebugParser.ElmValue.SeqArray

        DebugParser.ElmValue.SeqTuple ->
            Evergreen.V12.DebugParser.ElmValue.SeqTuple


migrate_Types_BackendMsgEvent_ : Evergreen.V5.Types.BackendMsgEvent_ -> Evergreen.V12.Types.BackendMsgEvent_
migrate_Types_BackendMsgEvent_ old =
    { msg = old.msg |> migrate_DebugParser_ElmValue_ElmValue
    , newModel = old.newModel |> migrate_DebugParser_ElmValue_ElmValue
    }


migrate_Types_DataType : Evergreen.V5.Types.DataType -> Evergreen.V12.Types.DataType
migrate_Types_DataType old =
    case old of
        Evergreen.V5.Types.Init p0 ->
            Evergreen.V12.Types.Init (p0 |> migrate_Types_Init_)

        Evergreen.V5.Types.Update p0 ->
            Evergreen.V12.Types.Update (p0 |> migrate_Types_Update_)

        Evergreen.V5.Types.UpdateFromFrontend p0 ->
            Evergreen.V12.Types.UpdateFromFrontend (p0 |> migrate_Types_UpdateFromFrontend_)


migrate_Types_DebugSession : Evergreen.V5.Types.DebugSession -> Evergreen.V12.Types.DebugSession
migrate_Types_DebugSession old =
    { initialModel = old.initialModel |> Maybe.map migrate_DebugParser_ElmValue_ElmValue
    , history = old.history |> Array.map migrate_Types_Event
    , connections = old.connections
    }


migrate_Types_Event : Evergreen.V5.Types.Event -> Evergreen.V12.Types.Event
migrate_Types_Event old =
    case old of
        Evergreen.V5.Types.BackendMsgEvent p0 ->
            Evergreen.V12.Types.BackendMsgEvent (p0 |> migrate_Types_BackendMsgEvent_)

        Evergreen.V5.Types.ToBackendEvent p0 ->
            Evergreen.V12.Types.ToBackendEvent (p0 |> migrate_Types_ToBackendEvent_)


migrate_Types_FrontendModel : Evergreen.V5.Types.FrontendModel -> Evergreen.V12.Types.FrontendModel
migrate_Types_FrontendModel old =
    case old of
        Evergreen.V5.Types.LoadingSession p0 ->
            Evergreen.V12.Types.LoadingSession (p0 |> migrate_Types_LoadingData)

        Evergreen.V5.Types.LoadedSession p0 ->
            Evergreen.V12.Types.LoadedSession (p0 |> migrate_Types_LoadedData)


migrate_Types_Init_ : Evergreen.V5.Types.Init_ -> Evergreen.V12.Types.Init_
migrate_Types_Init_ old =
    { sessionName = old.sessionName |> migrate_Types_SessionName
    , model = old.model |> migrate_DebugParser_ElmValue_ElmValue
    }


migrate_Types_LoadedData : Evergreen.V5.Types.LoadedData -> Evergreen.V12.Types.LoadedData
migrate_Types_LoadedData old =
    { key = old.key
    , sessionName = old.sessionName |> migrate_Types_SessionName
    , initialModel = old.initialModel |> Maybe.map migrate_DebugParser_ElmValue_ElmValue
    , history = old.history |> Array.map migrate_Types_Event
    , selected = old.selected
    }


migrate_Types_LoadingData : Evergreen.V5.Types.LoadingData -> Evergreen.V12.Types.LoadingData
migrate_Types_LoadingData old =
    { key = old.key
    , sessionName = old.sessionName |> migrate_Types_SessionName
    }


migrate_Types_SessionName : Evergreen.V5.Types.SessionName -> Evergreen.V12.Types.SessionName
migrate_Types_SessionName old =
    case old of
        Evergreen.V5.Types.SessionName p0 ->
            Evergreen.V12.Types.SessionName p0


migrate_Types_ToBackendEvent_ : Evergreen.V5.Types.ToBackendEvent_ -> Evergreen.V12.Types.ToBackendEvent_
migrate_Types_ToBackendEvent_ old =
    { msg = old.msg |> migrate_DebugParser_ElmValue_ElmValue
    , newModel = old.newModel |> migrate_DebugParser_ElmValue_ElmValue
    , sessionId = old.sessionId
    , clientId = old.clientId
    }


migrate_Types_ToFrontend : Evergreen.V5.Types.ToFrontend -> Evergreen.V12.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V5.Types.LoadSessionResponse p0 ->
            Evergreen.V12.Types.LoadSessionResponse (p0 |> migrate_Types_DebugSession)

        Evergreen.V5.Types.SessionUpdate p0 ->
            Evergreen.V12.Types.SessionUpdate (p0 |> migrate_Types_DataType)

        Evergreen.V5.Types.ResetSession ->
            Evergreen.V12.Types.ResetSession


migrate_Types_UpdateFromFrontend_ : Evergreen.V5.Types.UpdateFromFrontend_ -> Evergreen.V12.Types.UpdateFromFrontend_
migrate_Types_UpdateFromFrontend_ old =
    { sessionName = old.sessionName |> migrate_Types_SessionName
    , msg = old.msg |> migrate_DebugParser_ElmValue_ElmValue
    , newModel = old.newModel |> migrate_DebugParser_ElmValue_ElmValue
    , sessionId = old.sessionId
    , clientId = old.clientId
    }


migrate_Types_Update_ : Evergreen.V5.Types.Update_ -> Evergreen.V12.Types.Update_
migrate_Types_Update_ old =
    { sessionName = old.sessionName |> migrate_Types_SessionName
    , msg = old.msg |> migrate_DebugParser_ElmValue_ElmValue
    , newModel = old.newModel |> migrate_DebugParser_ElmValue_ElmValue
    }
