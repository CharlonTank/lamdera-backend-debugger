module Evergreen.Migrate.V20 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Array
import AssocList
import AssocSet
import Evergreen.V19.DebugParser.ElmValue
import Evergreen.V19.Types
import Evergreen.V20.DebugParser.ElmValue
import Evergreen.V20.Types
import Lamdera.Migrations exposing (..)
import Maybe


frontendModel : Evergreen.V19.Types.FrontendModel -> ModelMigration Evergreen.V20.Types.FrontendModel Evergreen.V20.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V19.Types.BackendModel -> ModelMigration Evergreen.V20.Types.BackendModel Evergreen.V20.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V19.Types.FrontendMsg -> MsgMigration Evergreen.V20.Types.FrontendMsg Evergreen.V20.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V19.Types.ToBackend -> MsgMigration Evergreen.V20.Types.ToBackend Evergreen.V20.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V19.Types.BackendMsg -> MsgMigration Evergreen.V20.Types.BackendMsg Evergreen.V20.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V19.Types.ToFrontend -> MsgMigration Evergreen.V20.Types.ToFrontend Evergreen.V20.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_AssocList_Dict : (a_old -> a_new) -> (b_old -> b_new) -> AssocList.Dict a_old b_old -> AssocList.Dict a_new b_new
migrate_AssocList_Dict migrate_a migrate_b old =
    old
        |> AssocList.toList
        |> List.map (Tuple.mapBoth migrate_a migrate_b)
        |> AssocList.fromList


migrate_AssocSet_Set : (a_old -> a_new) -> AssocSet.Set a_old -> AssocSet.Set a_new
migrate_AssocSet_Set migrate_a old =
    old |> AssocSet.map migrate_a


migrate_DebugParser_ElmValue_ElmValue : Evergreen.V19.DebugParser.ElmValue.ElmValue -> Evergreen.V20.DebugParser.ElmValue.ElmValue
migrate_DebugParser_ElmValue_ElmValue old =
    case old of
        Evergreen.V19.DebugParser.ElmValue.Plain p0 ->
            Evergreen.V20.DebugParser.ElmValue.Plain (p0 |> migrate_DebugParser_ElmValue_PlainValue)

        Evergreen.V19.DebugParser.ElmValue.Expandable p0 ->
            Evergreen.V20.DebugParser.ElmValue.Expandable (p0 |> migrate_DebugParser_ElmValue_ExpandableValue)


migrate_DebugParser_ElmValue_ExpandableValue : Evergreen.V19.DebugParser.ElmValue.ExpandableValue -> Evergreen.V20.DebugParser.ElmValue.ExpandableValue
migrate_DebugParser_ElmValue_ExpandableValue old =
    case old of
        Evergreen.V19.DebugParser.ElmValue.ElmSequence p0 p1 ->
            Evergreen.V20.DebugParser.ElmValue.ElmSequence (p0 |> migrate_DebugParser_ElmValue_SequenceType)
                (p1 |> List.map migrate_DebugParser_ElmValue_ElmValue)

        Evergreen.V19.DebugParser.ElmValue.ElmType p0 p1 ->
            Evergreen.V20.DebugParser.ElmValue.ElmType p0
                (p1 |> List.map migrate_DebugParser_ElmValue_ElmValue)

        Evergreen.V19.DebugParser.ElmValue.ElmRecord p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmRecord (p0 |> List.map (Tuple.mapSecond migrate_DebugParser_ElmValue_ElmValue))

        Evergreen.V19.DebugParser.ElmValue.ElmDict p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmDict (p0 |> List.map (Tuple.mapBoth migrate_DebugParser_ElmValue_ElmValue migrate_DebugParser_ElmValue_ElmValue))


migrate_DebugParser_ElmValue_PlainValue : Evergreen.V19.DebugParser.ElmValue.PlainValue -> Evergreen.V20.DebugParser.ElmValue.PlainValue
migrate_DebugParser_ElmValue_PlainValue old =
    case old of
        Evergreen.V19.DebugParser.ElmValue.ElmString p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmString p0

        Evergreen.V19.DebugParser.ElmValue.ElmChar p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmChar p0

        Evergreen.V19.DebugParser.ElmValue.ElmNumber p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmNumber p0

        Evergreen.V19.DebugParser.ElmValue.ElmBool p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmBool p0

        Evergreen.V19.DebugParser.ElmValue.ElmFunction ->
            Evergreen.V20.DebugParser.ElmValue.ElmFunction

        Evergreen.V19.DebugParser.ElmValue.ElmInternals ->
            Evergreen.V20.DebugParser.ElmValue.ElmInternals

        Evergreen.V19.DebugParser.ElmValue.ElmUnit ->
            Evergreen.V20.DebugParser.ElmValue.ElmUnit

        Evergreen.V19.DebugParser.ElmValue.ElmFile p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmFile p0

        Evergreen.V19.DebugParser.ElmValue.ElmBytes p0 ->
            Evergreen.V20.DebugParser.ElmValue.ElmBytes p0


migrate_DebugParser_ElmValue_SequenceType : Evergreen.V19.DebugParser.ElmValue.SequenceType -> Evergreen.V20.DebugParser.ElmValue.SequenceType
migrate_DebugParser_ElmValue_SequenceType old =
    case old of
        Evergreen.V19.DebugParser.ElmValue.SeqSet ->
            Evergreen.V20.DebugParser.ElmValue.SeqSet

        Evergreen.V19.DebugParser.ElmValue.SeqList ->
            Evergreen.V20.DebugParser.ElmValue.SeqList

        Evergreen.V19.DebugParser.ElmValue.SeqArray ->
            Evergreen.V20.DebugParser.ElmValue.SeqArray

        Evergreen.V19.DebugParser.ElmValue.SeqTuple ->
            Evergreen.V20.DebugParser.ElmValue.SeqTuple
